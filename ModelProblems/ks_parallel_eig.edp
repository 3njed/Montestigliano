		load "MUMPS_seq"
		defaulttoMUMPSseq();

		real xmin=-1.;
		real xmax=1.;
		real deltax=0.01;

		real U=1;
		real d=xmax-xmin;
		real gamma=1.;		
		real kmax=2*pi/d;
		real mu0=10;

		cout << "gamma=" << gamma << endl;
		cout << "mu0=" << mu0 << endl;
		complex lambda=-1i*kmax*U+mu0*kmax^2-gamma*kmax^4;
		cout << "lambda_1=" << lambda << endl;
				

		complex s=lambda;
		s=0;
		mesh th = square(round((xmax-xmin)/deltax),1,[xmin+(xmax-xmin)*x,y*deltax]);
		plot(th,wait=1);
		fespace WV(th,[P2,P2],periodic=[[2,y],[4,y]]);
		fespace W(th,P2,periodic=[[2,y],[4,y]]);
		WV [repw,repv]=[(abs(y)<deltax/10.),(abs(y)<deltax/10.)];		
		W repww=(abs(y)<deltax/10.);		
		
		// Linearized Navier-Stokes operator with time-stepping
		varf LKS([w,v],[w1,v1])=int1d(th,1)(-U*dx(w)*w1-mu0*v*w1+gamma*dx(v)*dx(w1)-s*w*w1+dx(w)*dx(v1)+v*v1);
        matrix<complex> MatLKS=LKS(WV,WV,solver=GMRES);
		
		{
				complex[int] diagofMatLKS(MatLKS.n);
				diagofMatLKS=MatLKS.diag;
				for(int ii=0; ii<MatLKS.n; ii++)
				{
					if(repw[][ii]==0.)
					{
						diagofMatLKS(ii)=1.e30;
					}
				} 
				MatLKS.diag=diagofMatLKS;
		}
		set(MatLKS,solver=sparsesolver);
			   
		// Mass-matrix or scalar-product
		
		varf Mass([w,v],[w1,v1])=int1d(th,1)(w*w1);
		matrix<complex> MatMass=Mass(WV,WV,solver=CG);

// Quantities needed for eigenvalue solver
int nev=20;
complex[int] ev(nev); // to store nev eigenvalues 
WV<complex>[int] [w,v](nev);   // to store nev eigenvectors  
int k; // number of converged eigenvalues 
		
cout << "Eigenvalue solve" << endl;
k=EigenValue(MatLKS,MatMass,sigma=s,value=ev,vector=w,tol=1e-10,maxit=90000,ncv=100);
k=min(k,nev);	//  some time the number of converged eigen value 
				// can be greater than nev;


// file to store eigenvalues
ofstream file("vp.txt");
file.precision(16);

// Loop on converged eigenvalues
W xx=x;
for (int kk=0;kk<k;kk++)
{
	// Save kkth eigenvalue
	file << real(ev[kk]) << " " << imag(ev[kk]) << " " << kk << endl;
	// Save kkth eigenvector
	W<complex> ww;
	ww=w[kk];
	{
		ofstream fifi("ev"+kk+".txt");
		fifi.precision(16);
		for(int ii=0; ii<repww.n; ii++)
		{
		 if(repww[][ii]!=0.)
			fifi << xx[][ii] << " " << real(ww[][ii]) << " " << imag(ww[][ii]) << endl;
		}
	}
}
